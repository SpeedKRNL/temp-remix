{
	"id": "a97ad5b099b192e58df43693b16f7b43",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/OasisSupbro.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\";\r\n\r\ncontract OasisSupbro {\r\n  function sayHelloWorld() public pure returns (string memory) {\r\n        return \"Hello World from Oasis Sup bro lol\";\r\n    }\r\n}\r\n"
			},
			"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title Sapphire\n * @notice This library provides a number of convenient wrappers for\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\n * encryption and decryption, signing key generation, message digest signing and\n * verification, gas padding and hashing.\n *\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\n * are cheap to call.\n *\n * #### Calling Precompiles Manually\n *\n * You can override the wrappers and call Sapphire precompiles by dispatching\n * calls to specific well-known contract addresses, as described below. The\n * __Precompile address__ section of each function will show you the address\n * of the corresponding precompile.\n *\n * Input parameters should be packed into a contiguous memory region with each\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\n * which will transparently handle things like putting `bytes` lengths in the\n * correct position.\n */\nlibrary Sapphire {\n    // Oasis-specific, confidential precompiles\n    address internal constant RANDOM_BYTES =\n        0x0100000000000000000000000000000000000001;\n    address internal constant DERIVE_KEY =\n        0x0100000000000000000000000000000000000002;\n    address internal constant ENCRYPT =\n        0x0100000000000000000000000000000000000003;\n    address internal constant DECRYPT =\n        0x0100000000000000000000000000000000000004;\n    address internal constant GENERATE_SIGNING_KEYPAIR =\n        0x0100000000000000000000000000000000000005;\n    address internal constant SIGN_DIGEST =\n        0x0100000000000000000000000000000000000006;\n    address internal constant VERIFY_DIGEST =\n        0x0100000000000000000000000000000000000007;\n    address internal constant CURVE25519_PUBLIC_KEY =\n        0x0100000000000000000000000000000000000008;\n    address internal constant GAS_USED =\n        0x0100000000000000000000000000000000000009;\n    address internal constant PAD_GAS =\n        0x010000000000000000000000000000000000000a;\n\n    // Oasis-specific, general precompiles\n    address internal constant SHA512_256 =\n        0x0100000000000000000000000000000000000101;\n    address internal constant SHA512 =\n        0x0100000000000000000000000000000000000102;\n    address internal constant SHA384 =\n        0x0100000000000000000000000000000000000104;\n\n    type Curve25519PublicKey is bytes32;\n    type Curve25519SecretKey is bytes32;\n\n    enum SigningAlg {\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\n        Ed25519Oasis,\n        /// Ed25519 signature over the provided message.\n        Ed25519Pure,\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\n        Ed25519PrehashedSha512,\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\n        Secp256k1Oasis,\n        /// Secp256k1 over the provided Keccak256 digest.\n        /// Can be used to sign transactions for Ethereum-compatible networks.\n        Secp256k1PrehashedKeccak256,\n        /// Secp256k1 signature over the provided SHA-256 digest.\n        Secp256k1PrehashedSha256,\n        /// Sr25519 signature over the provided message.\n        Sr25519,\n        /// Secp256r1 signature over the provided SHA-256 digest.\n        Secp256r1PrehashedSha256,\n        /// Secp384r1 signature over the provided SHA-384 digest.\n        Secp384r1PrehashedSha384\n    }\n\n    /**\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\n     * personalization string (`pers`) added into the hashing algorithm to\n     * increase domain separation when needed.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000001`\n     *\n     * #### Gas cost\n     *\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\n     * personalization string.\n     *\n     * #### Implementation details\n     *\n     * The mode (e.g. simulation or \"view call\" vs transaction execution) is fed\n     * to TupleHash (among other block-dependent components) to derive the \"key\n     * id\", which is then used to derive a per-block VRF key from\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\n     * id will result in a unique per-block VRF key. This per-block VRF key is\n     * then used to create the per-block root RNG which is then used to derive\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\n     *\n     * #### DANGER: Prior to Sapphire ParaTime 0.6.0\n     *\n     * All view queries and simulated transactions (via `eth_call`) would\n     * receive the same entropy in-between blocks if they use the same\n     * `num_bytes` and `pers` parameters. If your contract requires\n     * confidentiality you should generate a secret in the constructor to be\n     * used with view calls:\n     *\n     * ```solidity\n     * Sapphire.randomBytes(64, abi.encodePacked(msg.sender, this.perContactSecret));\n     * ```\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes memory randomPad = Sapphire.randomBytes(64, \"\");\n     * ```\n     *\n     * @param numBytes The number of bytes to return.\n     * @param pers An optional personalization string to increase domain\n     *        separation.\n     * @return The random bytes. If the number of bytes requested is too large\n     *         (over 1024), a smaller amount (1024) will be returned.\n     */\n    function randomBytes(uint256 numBytes, bytes memory pers)\n        internal\n        view\n        returns (bytes memory)\n    {\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\n            abi.encode(numBytes, pers)\n        );\n        require(success, \"randomBytes: failed\");\n        return entropy;\n    }\n\n    /**\n     * @notice Generates a Curve25519 keypair.\n     * @param pers An optional personalization string used to add domain\n     * separation.\n     * @return pk The Curve25519 public key. Useful for key exchange.\n     * @return sk The Curve25519 secret key. Pairs well with\n     * [deriveSymmetricKey](#derivesymmetrickey).\n     */\n    function generateCurve25519KeyPair(bytes memory pers)\n        internal\n        view\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\n    {\n        bytes memory scalar = randomBytes(32, pers);\n        // Twiddle some bits, as per RFC 7748 ยง5.\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\n        scalar[31] |= 0x40; // Clamp to >= 2^254\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\n            scalar\n        );\n        require(success, \"gen curve25519 pk: failed\");\n        return (\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\n            Curve25519SecretKey.wrap(bytes32(scalar))\n        );\n    }\n\n    /**\n     * @notice Derive a symmetric key from a pair of keys using x25519.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000002`\n     *\n     * #### Gas cost\n     *\n     * 100,000\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes32 publicKey = ... ;\n     * bytes32 privateKey = ... ;\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\n     * ```\n     *\n     * @param peerPublicKey The peer's public key.\n     * @param secretKey Your secret key.\n     * @return A derived symmetric key.\n     */\n    function deriveSymmetricKey(\n        Curve25519PublicKey peerPublicKey,\n        Curve25519SecretKey secretKey\n    ) internal view returns (bytes32) {\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\n            abi.encode(peerPublicKey, secretKey)\n        );\n        require(success, \"deriveSymmetricKey: failed\");\n        return bytes32(symmetric);\n    }\n\n    /**\n     * @notice Encrypt and authenticate the plaintext and additional data using\n     * DeoxysII.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000003`\n     *\n     * #### Gas cost\n     *\n     * 50,000 minimum plus 100 per word of input\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes32 key = ... ;\n     * bytes32 nonce = ... ;\n     * bytes memory text = \"plain text\";\n     * bytes memory ad = \"additional data\";\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n     * ```\n     *\n     * @param key The key to use for encryption.\n     * @param nonce The nonce. Note that only the first 15 bytes of this\n     * parameter are used.\n     * @param plaintext The plaintext to encrypt and authenticate.\n     * @param additionalData The additional data to authenticate.\n     * @return The ciphertext with appended auth tag.\n     */\n    function encrypt(\n        bytes32 key,\n        bytes32 nonce,\n        bytes memory plaintext,\n        bytes memory additionalData\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\n            abi.encode(key, nonce, plaintext, additionalData)\n        );\n        require(success, \"encrypt: failed\");\n        return ciphertext;\n    }\n\n    /**\n     * @notice Decrypt and authenticate the ciphertext and additional data using\n     * DeoxysII. Reverts if the auth tag is incorrect.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000004`\n     *\n     * #### Gas cost\n     *\n     * 50,000 minimum plus 100 per word of input\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes32 key = ... ;\n     * bytes32 nonce = ... ;\n     * bytes memory text = \"plain text\";\n     * bytes memory ad = \"additional data\";\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n     * ```\n     *\n     * @param key The key to use for decryption.\n     * @param nonce The nonce. Note that only the first 15 bytes of this\n     * parameter are used.\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\n     * @param additionalData The additional data to authenticate against the\n     * ciphertext.\n     * @return The original plaintext.\n     */\n    function decrypt(\n        bytes32 key,\n        bytes32 nonce,\n        bytes memory ciphertext,\n        bytes memory additionalData\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\n            abi.encode(key, nonce, ciphertext, additionalData)\n        );\n        require(success, \"decrypt: failed\");\n        return plaintext;\n    }\n\n    /**\n     * @notice Generate a public/private key pair using the specified method and\n     * seed. The available methods are items in the\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\n     * generation method ignores subvariants, so all three Ed25519-based are\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\n     * Sr25519 is not available and will return an error.\n     *\n     * #### Precompile address\n     * `0x0100000000000000000000000000000000000005`\n     *\n     * #### Gas Cost\n     *\n     * ##### Ed25519: 1,000 gas\n     *\n     * - `0` (`Ed25519Oasis`)\n     * - `1` (`Ed25519Pure`)\n     * - `2` (`Ed25519PrehashedSha512`)\n     *\n     * ##### Secp256k1: 1,500 gas.\n     * - `3` (`Secp256k1Oasis`)\n     * - `4` (`Secp256k1PrehashedKeccak256`)\n     * - `5` (`Secp256k1PrehashedSha256`)\n     *\n     * ##### Secp256r1: 4,000 gas\n     * - `7` (`Secp256r1PrehashedSha256`)\n     *\n     * #### Public Key Format\n     *\n     * ##### Ed25519\n     *\n     * 32 bytes\n     *\n     * ##### Secp256k1 & Secp256r1\n     *\n     * 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32 byte X\n     * coordinate).\n     *\n     * #### Example\n     *\n     * ```solidity\n     * bytes memory seed = hex\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\";\n     * bytes memory publicKey;\n     * bytes memory privateKey;\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\n     * ```\n     *\n     * @param alg The signing alg for which to generate a keypair.\n     * @param seed The seed to use for generating the key pair. You can use the\n     * `randomBytes` method if you don't already have a seed.\n     * @return publicKey The public half of the keypair.\n     * @return secretKey The secret half of the keypair.\n     */\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\n        internal\n        view\n        returns (bytes memory publicKey, bytes memory secretKey)\n    {\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\n            .staticcall(abi.encode(alg, seed));\n        require(success, \"gen signing keypair: failed\");\n        return abi.decode(keypair, (bytes, bytes));\n    }\n\n    /**\n     * @notice Sign a message within the provided context using the specified\n     * algorithm, and return the signature. The `context_or_digest` and\n     * `messages` parameters change in meaning slightly depending on the method\n     * requested. For methods that take a context in addition to the message you\n     * must pass the context in the `context_or_digest` parameter and use\n     * `message` as expected. For methods that take a pre-existing hash of the\n     * message, pass that in `context_or_digest` and leave `message` empty.\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\n     * context and a message (each are variable length `bytes`), the context\n     * serves as a domain separator.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000006`\n     *\n     * #### Gas cost\n     *\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\n     * context and message except digest.\n     *\n     * #### Signing algorithms\n     *\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\n     *   (64 bytes) as context, empty message.\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\n     *   (32 bytes) as context, empty message.\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\n     *   bytes) as context, empty message.\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\n     *   bytes) as context, empty message.\n     *\n     * #### Example\n     *\n     * ```solidity\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\n     * bytes memory pk;\n     * bytes memory sk;\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \"\"));\n     * bytes memory signature = Sapphire.sign(alg, sk, \"\", \"signed message\");\n     * ```\n     *\n     * @param alg The signing algorithm to use.\n     * @param secretKey The secret key to use for signing. The key must be valid\n     * for use with the requested algorithm.\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\n     * @param message Message to sign, should be zero-length if precomputed hash\n     * given.\n     * @return signature The resulting signature.\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\n     */\n    function sign(\n        SigningAlg alg,\n        bytes memory secretKey,\n        bytes memory contextOrHash,\n        bytes memory message\n    ) internal view returns (bytes memory signature) {\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\n            abi.encode(alg, secretKey, contextOrHash, message)\n        );\n        require(success, \"sign: failed\");\n        return sig;\n    }\n\n    /**\n     * @notice Verifies that the provided digest was signed with using the\n     * secret key corresponding to the provided private key and the specified\n     * signing algorithm.\n     *\n     * The `method`, `context_or_digest` and `message` parameters have the same\n     * meaning as described above in the [sign()](#sign) function.\n     *\n     * #### Precompile address\n     *\n     * `0x0100000000000000000000000000000000000007`\n     *\n     * #### Gas cost\n     *\n     * The algorithm-specific base cost below, with an additional **8 gas per\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\n     *\n     * - `0` (`Ed25519Oasis`): 2,000 gas\n     * - `1` (`Ed25519Pure`): 2,000 gas\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\n     *\n     * #### Example\n     *\n     * ```solidity\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\n     * bytes memory pk;\n     * bytes memory sk;\n     * bytes memory digest = abi.encodePacked(keccak256(\"signed message\"));\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \"\"));\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \"\");\n     * require( Sapphire.verify(alg, pk, digest, \"\", signature) );\n     * ```\n     *\n     * @param alg The signing algorithm by which the signature was generated.\n     * @param publicKey The public key against which to check the signature.\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\n     * @param message The hash of the message that was signed, should be\n     * zero-length if precomputed hash was given.\n     * @param signature The signature to check.\n     * @return verified Whether the signature is valid for the given parameters.\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\n     */\n    function verify(\n        SigningAlg alg,\n        bytes memory publicKey,\n        bytes memory contextOrHash,\n        bytes memory message,\n        bytes memory signature\n    ) internal view returns (bool verified) {\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\n        );\n        require(success, \"verify: failed\");\n        return abi.decode(v, (bool));\n    }\n\n    /**\n     * @notice Set the current transactions gas usage to a specific amount\n     * @dev Will cause a reversion if the current usage is more than the amount.\n     * @param toAmount Gas usage will be set to this amount\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\n     *\n     */\n    function padGas(uint128 toAmount) internal view {\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\n        require(success, \"verify: failed\");\n    }\n\n    /**\n     * @notice Returns the amount of gas currently used by the transaction\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\n     */\n    function gasUsed() internal view returns (uint64) {\n        (bool success, bytes memory v) = GAS_USED.staticcall(\"\");\n        require(success, \"gasused: failed\");\n        return abi.decode(v, (uint64));\n    }\n}\n\n/**\n * @notice Hash the input data with SHA-512/256, according to\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n *\n * #### Precompile address\n *\n * `0x0100000000000000000000000000000000000102`\n *\n * #### Gas cost\n *\n * 115 gas, then 13 gas per word\n *\n * #### Example\n *\n * ```solidity\n * bytes32 result = sha512_256(abi.encodePacked(\"input data\"));\n * ```\n *\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\n *\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\n * relevant if you are computing the hash of a secret message. The\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\n * vulnerable to length-extension attacks.\n *\n * @param input Bytes to hash.\n * @return result 32 byte digest.\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\n */\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\n\n    require(success, \"sha512_256\");\n\n    return bytes32(output);\n}\n\n/**\n * @notice Hash the input data with SHA-512, according to\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\n *\n * #### Precompile address\n *\n * `0x0100000000000000000000000000000000000101`\n *\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\n *\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\n * relevant if you are computing the hash of a secret message. The\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\n * vulnerable to length-extension attacks.\n *\n * #### Gas Cost\n *\n * 115 gas, then 13 gas per word\n *\n * #### Example\n *\n * ```solidity\n * bytes memory result = sha512(abi.encodePacked(\"input data\"));\n * ```\n *\n * @param input Bytes to hash.\n * @return output 64 byte digest.\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\n */\nfunction sha512(bytes memory input) view returns (bytes memory output) {\n    bool success;\n\n    (success, output) = Sapphire.SHA512.staticcall(input);\n\n    require(success, \"sha512\");\n}\n\n/**\n * @notice Hash the input data with SHA-384.\n * @param input Bytes to hash.\n * @return output 48 byte digest.\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\n */\nfunction sha384(bytes memory input) view returns (bytes memory output) {\n    bool success;\n\n    (success, output) = Sapphire.SHA384.staticcall(input);\n\n    require(success, \"sha384\");\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol": {
				"Sapphire": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Sapphire",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":1117:19940  library Sapphire {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":1117:19940  library Sapphire {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e98807dfbe98ae0330d9fd78bfa206791afa4f211bc9efb021c186d89319a2eb64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e98807dfbe98ae0330d9fd78bfa206791afa4f211bc9efb021c186d89319a2eb64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 DUP9 SMOD 0xDF 0xBE SWAP9 0xAE SUB ADDRESS 0xD9 REVERT PUSH25 0xBFA206791AFA4F211BC9EFB021C186D89319A2EB64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1117:18823:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e98807dfbe98ae0330d9fd78bfa206791afa4f211bc9efb021c186d89319a2eb64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE9 DUP9 SMOD 0xDF 0xBE SWAP9 0xAE SUB ADDRESS 0xD9 REVERT PUSH25 0xBFA206791AFA4F211BC9EFB021C186D89319A2EB64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1117:18823:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"decrypt(bytes32,bytes32,bytes memory,bytes memory)": "infinite",
								"deriveSymmetricKey(Sapphire.Curve25519PublicKey,Sapphire.Curve25519SecretKey)": "infinite",
								"encrypt(bytes32,bytes32,bytes memory,bytes memory)": "infinite",
								"gasUsed()": "infinite",
								"generateCurve25519KeyPair(bytes memory)": "infinite",
								"generateSigningKeyPair(enum Sapphire.SigningAlg,bytes memory)": "infinite",
								"padGas(uint128)": "infinite",
								"randomBytes(uint256,bytes memory)": "infinite",
								"sign(enum Sapphire.SigningAlg,bytes memory,bytes memory,bytes memory)": "infinite",
								"verify(enum Sapphire.SigningAlg,bytes memory,bytes memory,bytes memory,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1117,
									"end": 19940,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e98807dfbe98ae0330d9fd78bfa206791afa4f211bc9efb021c186d89319a2eb64736f6c634300081a0033",
									".code": [
										{
											"begin": 1117,
											"end": 19940,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1117,
											"end": 19940,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol",
								"contracts/OasisSupbro.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Sapphire\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library provides a number of convenient wrappers for cryptographic operations such as the x25519 key derivation, Deoxys-II-based encryption and decryption, signing key generation, message digest signing and verification, gas padding and hashing. Most of the mentioned functions are implemented as Sapphire's precompiles and are cheap to call. #### Calling Precompiles Manually You can override the wrappers and call Sapphire precompiles by dispatching calls to specific well-known contract addresses, as described below. The __Precompile address__ section of each function will show you the address of the corresponding precompile. Input parameters should be packed into a contiguous memory region with each chunk of data padded to 32 bytes as usual. The recommended way to construct parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`, which will transparently handle things like putting `bytes` lengths in the correct position.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":\"Sapphire\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":{\"keccak256\":\"0x81a0aa5766f7c48ea799114f44e902b2eb11f21808db23d56b6ca9edd48b8f59\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a94bd0c5263e98788d38bf7b6c24781dac3df4d5cb14045f70d14e208719c292\",\"dweb:/ipfs/QmZKEwnG9a9uPbgWCPVcbW7WGTy53Su6P1DTV95goPs4yU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "This library provides a number of convenient wrappers for cryptographic operations such as the x25519 key derivation, Deoxys-II-based encryption and decryption, signing key generation, message digest signing and verification, gas padding and hashing. Most of the mentioned functions are implemented as Sapphire's precompiles and are cheap to call. #### Calling Precompiles Manually You can override the wrappers and call Sapphire precompiles by dispatching calls to specific well-known contract addresses, as described below. The __Precompile address__ section of each function will show you the address of the corresponding precompile. Input parameters should be packed into a contiguous memory region with each chunk of data padded to 32 bytes as usual. The recommended way to construct parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`, which will transparently handle things like putting `bytes` lengths in the correct position.",
						"version": 1
					}
				}
			},
			"contracts/OasisSupbro.sol": {
				"OasisSupbro": {
					"abi": [
						{
							"inputs": [],
							"name": "sayHelloWorld",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/OasisSupbro.sol\":138:290  contract OasisSupbro {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/OasisSupbro.sol\":138:290  contract OasisSupbro {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x45773e4e\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/OasisSupbro.sol\":164:287  function sayHelloWorld() public pure returns (string memory) {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"contracts/OasisSupbro.sol\":210:223  string memory */\n      0x60\n        /* \"contracts/OasisSupbro.sol\":236:279  return \"Hello World from Oasis Sup bro lol\" */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      data_3354c013fd7fcff5b821decec15a4606889a6da03ed6306d27e9fa83e8e06638\n      0x22\n      swap2\n      codecopy\n      swap1\n      pop\n        /* \"contracts/OasisSupbro.sol\":164:287  function sayHelloWorld() public pure returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_9:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_10:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:426   */\n    tag_11:\n        /* \"#utility.yul\":376:382   */\n      dup3\n        /* \"#utility.yul\":371:374   */\n      dup2\n        /* \"#utility.yul\":366:369   */\n      dup4\n        /* \"#utility.yul\":360:383   */\n      mcopy\n        /* \"#utility.yul\":417:418   */\n      0x00\n        /* \"#utility.yul\":408:414   */\n      dup4\n        /* \"#utility.yul\":403:406   */\n      dup4\n        /* \"#utility.yul\":399:415   */\n      add\n        /* \"#utility.yul\":392:419   */\n      mstore\n        /* \"#utility.yul\":287:426   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":432:534   */\n    tag_12:\n        /* \"#utility.yul\":473:479   */\n      0x00\n        /* \"#utility.yul\":524:526   */\n      0x1f\n        /* \"#utility.yul\":520:527   */\n      not\n        /* \"#utility.yul\":515:517   */\n      0x1f\n        /* \"#utility.yul\":508:513   */\n      dup4\n        /* \"#utility.yul\":504:518   */\n      add\n        /* \"#utility.yul\":500:528   */\n      and\n        /* \"#utility.yul\":490:528   */\n      swap1\n      pop\n        /* \"#utility.yul\":432:534   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":540:917   */\n    tag_13:\n        /* \"#utility.yul\":628:631   */\n      0x00\n        /* \"#utility.yul\":656:695   */\n      tag_20\n        /* \"#utility.yul\":689:694   */\n      dup3\n        /* \"#utility.yul\":656:695   */\n      tag_9\n      jump\t// in\n    tag_20:\n        /* \"#utility.yul\":711:782   */\n      tag_21\n        /* \"#utility.yul\":775:781   */\n      dup2\n        /* \"#utility.yul\":770:773   */\n      dup6\n        /* \"#utility.yul\":711:782   */\n      tag_10\n      jump\t// in\n    tag_21:\n        /* \"#utility.yul\":704:782   */\n      swap4\n      pop\n        /* \"#utility.yul\":791:856   */\n      tag_22\n        /* \"#utility.yul\":849:855   */\n      dup2\n        /* \"#utility.yul\":844:847   */\n      dup6\n        /* \"#utility.yul\":837:841   */\n      0x20\n        /* \"#utility.yul\":830:835   */\n      dup7\n        /* \"#utility.yul\":826:842   */\n      add\n        /* \"#utility.yul\":791:856   */\n      tag_11\n      jump\t// in\n    tag_22:\n        /* \"#utility.yul\":881:910   */\n      tag_23\n        /* \"#utility.yul\":903:909   */\n      dup2\n        /* \"#utility.yul\":881:910   */\n      tag_12\n      jump\t// in\n    tag_23:\n        /* \"#utility.yul\":876:879   */\n      dup5\n        /* \"#utility.yul\":872:911   */\n      add\n        /* \"#utility.yul\":865:911   */\n      swap2\n      pop\n        /* \"#utility.yul\":632:917   */\n      pop\n        /* \"#utility.yul\":540:917   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":923:1236   */\n    tag_7:\n        /* \"#utility.yul\":1036:1040   */\n      0x00\n        /* \"#utility.yul\":1074:1076   */\n      0x20\n        /* \"#utility.yul\":1063:1072   */\n      dup3\n        /* \"#utility.yul\":1059:1077   */\n      add\n        /* \"#utility.yul\":1051:1077   */\n      swap1\n      pop\n        /* \"#utility.yul\":1123:1132   */\n      dup2\n        /* \"#utility.yul\":1117:1121   */\n      dup2\n        /* \"#utility.yul\":1113:1133   */\n      sub\n        /* \"#utility.yul\":1109:1110   */\n      0x00\n        /* \"#utility.yul\":1098:1107   */\n      dup4\n        /* \"#utility.yul\":1094:1111   */\n      add\n        /* \"#utility.yul\":1087:1134   */\n      mstore\n        /* \"#utility.yul\":1151:1229   */\n      tag_25\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1215:1221   */\n      dup5\n        /* \"#utility.yul\":1151:1229   */\n      tag_13\n      jump\t// in\n    tag_25:\n        /* \"#utility.yul\":1143:1229   */\n      swap1\n      pop\n        /* \"#utility.yul\":923:1236   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_3354c013fd7fcff5b821decec15a4606889a6da03ed6306d27e9fa83e8e06638 48656c6c6f20576f726c642066726f6d204f61736973205375702062726f206c6f6c\n\n    auxdata: 0xa2646970667358221220484b4d7d9e7047ab362cef30ef401e07b6f5dead7f0c053ddd6fb31e04450fae64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b506101538061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806345773e4e1461002d575b5f80fd5b61003561004b565b60405161004291906100db565b60405180910390f35b60606040518060600160405280602281526020016100fc60229139905090565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6100ad8261006b565b6100b78185610075565b93506100c7818560208601610085565b6100d081610093565b840191505092915050565b5f6020820190508181035f8301526100f381846100a3565b90509291505056fe48656c6c6f20576f726c642066726f6d204f61736973205375702062726f206c6f6ca2646970667358221220484b4d7d9e7047ab362cef30ef401e07b6f5dead7f0c053ddd6fb31e04450fae64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x153 DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x45773E4E EQ PUSH2 0x2D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x35 PUSH2 0x4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFC PUSH1 0x22 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xAD DUP3 PUSH2 0x6B JUMP JUMPDEST PUSH2 0xB7 DUP2 DUP6 PUSH2 0x75 JUMP JUMPDEST SWAP4 POP PUSH2 0xC7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x85 JUMP JUMPDEST PUSH2 0xD0 DUP2 PUSH2 0x93 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xF3 DUP2 DUP5 PUSH2 0xA3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID BASEFEE PUSH6 0x6C6C6F20576F PUSH19 0x6C642066726F6D204F61736973205375702062 PUSH19 0x6F206C6F6CA2646970667358221220484B4D7D SWAP15 PUSH17 0x47AB362CEF30EF401E07B6F5DEAD7F0C05 RETURNDATASIZE 0xDD PUSH16 0xB31E04450FAE64736F6C634300081A00 CALLER ",
							"sourceMap": "138:152:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@sayHelloWorld_537": {
									"entryPoint": 75,
									"id": 537,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 163,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 219,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 107,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 117,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 133,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 147,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:1239:2",
										"nodeType": "YulBlock",
										"src": "0:1239:2",
										"statements": [
											{
												"body": {
													"nativeSrc": "66:40:2",
													"nodeType": "YulBlock",
													"src": "66:40:2",
													"statements": [
														{
															"nativeSrc": "77:22:2",
															"nodeType": "YulAssignment",
															"src": "77:22:2",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "93:5:2",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "87:5:2",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:2"
																},
																"nativeSrc": "87:12:2",
																"nodeType": "YulFunctionCall",
																"src": "87:12:2"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "77:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:2"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7:99:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "49:5:2",
														"nodeType": "YulTypedName",
														"src": "49:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "59:6:2",
														"nodeType": "YulTypedName",
														"src": "59:6:2",
														"type": ""
													}
												],
												"src": "7:99:2"
											},
											{
												"body": {
													"nativeSrc": "208:73:2",
													"nodeType": "YulBlock",
													"src": "208:73:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "225:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:2"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "230:6:2",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "218:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:2"
																},
																"nativeSrc": "218:19:2",
																"nodeType": "YulFunctionCall",
																"src": "218:19:2"
															},
															"nativeSrc": "218:19:2",
															"nodeType": "YulExpressionStatement",
															"src": "218:19:2"
														},
														{
															"nativeSrc": "246:29:2",
															"nodeType": "YulAssignment",
															"src": "246:29:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "265:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:2"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "270:4:2",
																		"nodeType": "YulLiteral",
																		"src": "270:4:2",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "261:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:2"
																},
																"nativeSrc": "261:14:2",
																"nodeType": "YulFunctionCall",
																"src": "261:14:2"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "246:11:2",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:2"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "112:169:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "180:3:2",
														"nodeType": "YulTypedName",
														"src": "180:3:2",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "185:6:2",
														"nodeType": "YulTypedName",
														"src": "185:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "196:11:2",
														"nodeType": "YulTypedName",
														"src": "196:11:2",
														"type": ""
													}
												],
												"src": "112:169:2"
											},
											{
												"body": {
													"nativeSrc": "349:77:2",
													"nodeType": "YulBlock",
													"src": "349:77:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "366:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "366:3:2"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "371:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "371:3:2"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "376:6:2",
																		"nodeType": "YulIdentifier",
																		"src": "376:6:2"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "360:5:2",
																	"nodeType": "YulIdentifier",
																	"src": "360:5:2"
																},
																"nativeSrc": "360:23:2",
																"nodeType": "YulFunctionCall",
																"src": "360:23:2"
															},
															"nativeSrc": "360:23:2",
															"nodeType": "YulExpressionStatement",
															"src": "360:23:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "403:3:2",
																				"nodeType": "YulIdentifier",
																				"src": "403:3:2"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "408:6:2",
																				"nodeType": "YulIdentifier",
																				"src": "408:6:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "399:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "399:3:2"
																		},
																		"nativeSrc": "399:16:2",
																		"nodeType": "YulFunctionCall",
																		"src": "399:16:2"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "417:1:2",
																		"nodeType": "YulLiteral",
																		"src": "417:1:2",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "392:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "392:6:2"
																},
																"nativeSrc": "392:27:2",
																"nodeType": "YulFunctionCall",
																"src": "392:27:2"
															},
															"nativeSrc": "392:27:2",
															"nodeType": "YulExpressionStatement",
															"src": "392:27:2"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "287:139:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "331:3:2",
														"nodeType": "YulTypedName",
														"src": "331:3:2",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "336:3:2",
														"nodeType": "YulTypedName",
														"src": "336:3:2",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "341:6:2",
														"nodeType": "YulTypedName",
														"src": "341:6:2",
														"type": ""
													}
												],
												"src": "287:139:2"
											},
											{
												"body": {
													"nativeSrc": "480:54:2",
													"nodeType": "YulBlock",
													"src": "480:54:2",
													"statements": [
														{
															"nativeSrc": "490:38:2",
															"nodeType": "YulAssignment",
															"src": "490:38:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "508:5:2",
																				"nodeType": "YulIdentifier",
																				"src": "508:5:2"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "515:2:2",
																				"nodeType": "YulLiteral",
																				"src": "515:2:2",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "504:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "504:3:2"
																		},
																		"nativeSrc": "504:14:2",
																		"nodeType": "YulFunctionCall",
																		"src": "504:14:2"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "524:2:2",
																				"nodeType": "YulLiteral",
																				"src": "524:2:2",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "520:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "520:3:2"
																		},
																		"nativeSrc": "520:7:2",
																		"nodeType": "YulFunctionCall",
																		"src": "520:7:2"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "500:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:2"
																},
																"nativeSrc": "500:28:2",
																"nodeType": "YulFunctionCall",
																"src": "500:28:2"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "490:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "490:6:2"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "432:102:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "463:5:2",
														"nodeType": "YulTypedName",
														"src": "463:5:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "473:6:2",
														"nodeType": "YulTypedName",
														"src": "473:6:2",
														"type": ""
													}
												],
												"src": "432:102:2"
											},
											{
												"body": {
													"nativeSrc": "632:285:2",
													"nodeType": "YulBlock",
													"src": "632:285:2",
													"statements": [
														{
															"nativeSrc": "642:53:2",
															"nodeType": "YulVariableDeclaration",
															"src": "642:53:2",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "689:5:2",
																		"nodeType": "YulIdentifier",
																		"src": "689:5:2"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "656:32:2",
																	"nodeType": "YulIdentifier",
																	"src": "656:32:2"
																},
																"nativeSrc": "656:39:2",
																"nodeType": "YulFunctionCall",
																"src": "656:39:2"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "646:6:2",
																	"nodeType": "YulTypedName",
																	"src": "646:6:2",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "704:78:2",
															"nodeType": "YulAssignment",
															"src": "704:78:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "770:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "770:3:2"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "775:6:2",
																		"nodeType": "YulIdentifier",
																		"src": "775:6:2"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "711:58:2",
																	"nodeType": "YulIdentifier",
																	"src": "711:58:2"
																},
																"nativeSrc": "711:71:2",
																"nodeType": "YulFunctionCall",
																"src": "711:71:2"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "704:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "704:3:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "830:5:2",
																				"nodeType": "YulIdentifier",
																				"src": "830:5:2"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "837:4:2",
																				"nodeType": "YulLiteral",
																				"src": "837:4:2",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "826:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "826:3:2"
																		},
																		"nativeSrc": "826:16:2",
																		"nodeType": "YulFunctionCall",
																		"src": "826:16:2"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "844:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "844:3:2"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "849:6:2",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:2"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "791:34:2",
																	"nodeType": "YulIdentifier",
																	"src": "791:34:2"
																},
																"nativeSrc": "791:65:2",
																"nodeType": "YulFunctionCall",
																"src": "791:65:2"
															},
															"nativeSrc": "791:65:2",
															"nodeType": "YulExpressionStatement",
															"src": "791:65:2"
														},
														{
															"nativeSrc": "865:46:2",
															"nodeType": "YulAssignment",
															"src": "865:46:2",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "876:3:2",
																		"nodeType": "YulIdentifier",
																		"src": "876:3:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "903:6:2",
																				"nodeType": "YulIdentifier",
																				"src": "903:6:2"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "881:21:2",
																			"nodeType": "YulIdentifier",
																			"src": "881:21:2"
																		},
																		"nativeSrc": "881:29:2",
																		"nodeType": "YulFunctionCall",
																		"src": "881:29:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "872:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:2"
																},
																"nativeSrc": "872:39:2",
																"nodeType": "YulFunctionCall",
																"src": "872:39:2"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "865:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "865:3:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "540:377:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "613:5:2",
														"nodeType": "YulTypedName",
														"src": "613:5:2",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "620:3:2",
														"nodeType": "YulTypedName",
														"src": "620:3:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "628:3:2",
														"nodeType": "YulTypedName",
														"src": "628:3:2",
														"type": ""
													}
												],
												"src": "540:377:2"
											},
											{
												"body": {
													"nativeSrc": "1041:195:2",
													"nodeType": "YulBlock",
													"src": "1041:195:2",
													"statements": [
														{
															"nativeSrc": "1051:26:2",
															"nodeType": "YulAssignment",
															"src": "1051:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1063:9:2",
																		"nodeType": "YulIdentifier",
																		"src": "1063:9:2"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1074:2:2",
																		"nodeType": "YulLiteral",
																		"src": "1074:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1059:3:2",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:2"
																},
																"nativeSrc": "1059:18:2",
																"nodeType": "YulFunctionCall",
																"src": "1059:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1051:4:2",
																	"nodeType": "YulIdentifier",
																	"src": "1051:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1098:9:2",
																				"nodeType": "YulIdentifier",
																				"src": "1098:9:2"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1109:1:2",
																				"nodeType": "YulLiteral",
																				"src": "1109:1:2",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1094:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "1094:3:2"
																		},
																		"nativeSrc": "1094:17:2",
																		"nodeType": "YulFunctionCall",
																		"src": "1094:17:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1117:4:2",
																				"nodeType": "YulIdentifier",
																				"src": "1117:4:2"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1123:9:2",
																				"nodeType": "YulIdentifier",
																				"src": "1123:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1113:3:2",
																			"nodeType": "YulIdentifier",
																			"src": "1113:3:2"
																		},
																		"nativeSrc": "1113:20:2",
																		"nodeType": "YulFunctionCall",
																		"src": "1113:20:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1087:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "1087:6:2"
																},
																"nativeSrc": "1087:47:2",
																"nodeType": "YulFunctionCall",
																"src": "1087:47:2"
															},
															"nativeSrc": "1087:47:2",
															"nodeType": "YulExpressionStatement",
															"src": "1087:47:2"
														},
														{
															"nativeSrc": "1143:86:2",
															"nodeType": "YulAssignment",
															"src": "1143:86:2",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1215:6:2",
																		"nodeType": "YulIdentifier",
																		"src": "1215:6:2"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1224:4:2",
																		"nodeType": "YulIdentifier",
																		"src": "1224:4:2"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1151:63:2",
																	"nodeType": "YulIdentifier",
																	"src": "1151:63:2"
																},
																"nativeSrc": "1151:78:2",
																"nodeType": "YulFunctionCall",
																"src": "1151:78:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1143:4:2",
																	"nodeType": "YulIdentifier",
																	"src": "1143:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "923:313:2",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1013:9:2",
														"nodeType": "YulTypedName",
														"src": "1013:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1025:6:2",
														"nodeType": "YulTypedName",
														"src": "1025:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1036:4:2",
														"nodeType": "YulTypedName",
														"src": "1036:4:2",
														"type": ""
													}
												],
												"src": "923:313:2"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610029575f3560e01c806345773e4e1461002d575b5f80fd5b61003561004b565b60405161004291906100db565b60405180910390f35b60606040518060600160405280602281526020016100fc60229139905090565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6100ad8261006b565b6100b78185610075565b93506100c7818560208601610085565b6100d081610093565b840191505092915050565b5f6020820190508181035f8301526100f381846100a3565b90509291505056fe48656c6c6f20576f726c642066726f6d204f61736973205375702062726f206c6f6ca2646970667358221220484b4d7d9e7047ab362cef30ef401e07b6f5dead7f0c053ddd6fb31e04450fae64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x29 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x45773E4E EQ PUSH2 0x2D JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x35 PUSH2 0x4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x42 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFC PUSH1 0x22 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xAD DUP3 PUSH2 0x6B JUMP JUMPDEST PUSH2 0xB7 DUP2 DUP6 PUSH2 0x75 JUMP JUMPDEST SWAP4 POP PUSH2 0xC7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x85 JUMP JUMPDEST PUSH2 0xD0 DUP2 PUSH2 0x93 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xF3 DUP2 DUP5 PUSH2 0xA3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID BASEFEE PUSH6 0x6C6C6F20576F PUSH19 0x6C642066726F6D204F61736973205375702062 PUSH19 0x6F206C6F6CA2646970667358221220484B4D7D SWAP15 PUSH17 0x47AB362CEF30EF401E07B6F5DEAD7F0C05 RETURNDATASIZE 0xDD PUSH16 0xB31E04450FAE64736F6C634300081A00 CALLER ",
							"sourceMap": "138:152:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;164:123;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;210:13;236:43;;;;;;;;;;;;;;;;;;;164:123;:::o;7:99:2:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "67800",
								"executionCost": "115",
								"totalCost": "67915"
							},
							"external": {
								"sayHelloWorld()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 138,
									"end": 290,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 138,
									"end": 290,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220484b4d7d9e7047ab362cef30ef401e07b6f5dead7f0c053ddd6fb31e04450fae64736f6c634300081a0033",
									".code": [
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "45773E4E"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 138,
											"end": 290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 138,
											"end": 290,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 164,
											"end": 287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 164,
											"end": 287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 164,
											"end": 287,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 210,
											"end": 223,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH data",
											"source": 1,
											"value": "3354C013FD7FCFF5B821DECEC15A4606889A6DA03ED6306D27E9FA83E8E06638"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 236,
											"end": 279,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "CODECOPY",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 236,
											"end": 279,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 164,
											"end": 287,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 287,
											"end": 426,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 287,
											"end": 426,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 376,
											"end": 382,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 371,
											"end": 374,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 366,
											"end": 369,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 360,
											"end": 383,
											"name": "MCOPY",
											"source": 2
										},
										{
											"begin": 417,
											"end": 418,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 408,
											"end": 414,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 403,
											"end": 406,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 399,
											"end": 415,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 392,
											"end": 419,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 287,
											"end": 426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 432,
											"end": 534,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 432,
											"end": 534,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 473,
											"end": 479,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 526,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 504,
											"end": 518,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 500,
											"end": 528,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 490,
											"end": 528,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 490,
											"end": 528,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 432,
											"end": 534,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 432,
											"end": 534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 540,
											"end": 917,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 540,
											"end": 917,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 628,
											"end": 631,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 656,
											"end": 695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 656,
											"end": 695,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 770,
											"end": 773,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 711,
											"end": 782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 711,
											"end": 782,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 711,
											"end": 782,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 704,
											"end": 782,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 704,
											"end": 782,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 844,
											"end": 847,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 837,
											"end": 841,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 830,
											"end": 835,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 826,
											"end": 842,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 791,
											"end": 856,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 791,
											"end": 856,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 791,
											"end": 856,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 903,
											"end": 909,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 881,
											"end": 910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 881,
											"end": 910,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 881,
											"end": 910,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 876,
											"end": 879,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 872,
											"end": 911,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 865,
											"end": 911,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 865,
											"end": 911,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 632,
											"end": 917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 540,
											"end": 917,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1036,
											"end": 1040,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1076,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1063,
											"end": 1072,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1059,
											"end": 1077,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1123,
											"end": 1132,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1117,
											"end": 1121,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1113,
											"end": 1133,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1109,
											"end": 1110,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1107,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1094,
											"end": 1111,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1087,
											"end": 1134,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1221,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1151,
											"end": 1229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 923,
											"end": 1236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										}
									],
									".data": {
										"3354C013FD7FCFF5B821DECEC15A4606889A6DA03ED6306D27E9FA83E8E06638": "48656c6c6f20576f726c642066726f6d204f61736973205375702062726f206c6f6c"
									}
								}
							},
							"sourceList": [
								"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol",
								"contracts/OasisSupbro.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"sayHelloWorld()": "45773e4e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"sayHelloWorld\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OasisSupbro.sol\":\"OasisSupbro\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":{\"keccak256\":\"0x81a0aa5766f7c48ea799114f44e902b2eb11f21808db23d56b6ca9edd48b8f59\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a94bd0c5263e98788d38bf7b6c24781dac3df4d5cb14045f70d14e208719c292\",\"dweb:/ipfs/QmZKEwnG9a9uPbgWCPVcbW7WGTy53Su6P1DTV95goPs4yU\"]},\"contracts/OasisSupbro.sol\":{\"keccak256\":\"0x48f6849a7fe43a402f3fd6207d448fd146aa1b1f52e50514783171e04e7704c2\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://2b63eb511869012d7349a247ce3d961ebfec6b2f59ed250a92ec498c0b57f8f9\",\"dweb:/ipfs/QmXSqoVbcYc3si5mgMowjUZRe3eGEXSYDFZiWwhYe7AW44\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol": {
				"ast": {
					"absolutePath": "@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol",
					"exportedSymbols": {
						"Sapphire": [
							443
						],
						"sha384": [
							526
						],
						"sha512": [
							499
						],
						"sha512_256": [
							472
						]
					},
					"id": 527,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Sapphire",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "64:1052:0",
								"text": " @title Sapphire\n @notice This library provides a number of convenient wrappers for\n cryptographic operations such as the x25519 key derivation, Deoxys-II-based\n encryption and decryption, signing key generation, message digest signing and\n verification, gas padding and hashing.\n Most of the mentioned functions are implemented as Sapphire's precompiles and\n are cheap to call.\n #### Calling Precompiles Manually\n You can override the wrappers and call Sapphire precompiles by dispatching\n calls to specific well-known contract addresses, as described below. The\n __Precompile address__ section of each function will show you the address\n of the corresponding precompile.\n Input parameters should be packed into a contiguous memory region with each\n chunk of data padded to 32 bytes as usual. The recommended way to construct\n parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\n which will transparently handle things like putting `bytes` lengths in the\n correct position."
							},
							"fullyImplemented": true,
							"id": 443,
							"linearizedBaseContracts": [
								443
							],
							"name": "Sapphire",
							"nameLocation": "1125:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 5,
									"mutability": "constant",
									"name": "RANDOM_BYTES",
									"nameLocation": "1214:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1188:91:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1188:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303031",
										"id": 4,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1237:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000001"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 8,
									"mutability": "constant",
									"name": "DERIVE_KEY",
									"nameLocation": "1311:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1285:89:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1285:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303032",
										"id": 7,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1332:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000002"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 11,
									"mutability": "constant",
									"name": "ENCRYPT",
									"nameLocation": "1406:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1380:86:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1380:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303033",
										"id": 10,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1424:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000003"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 14,
									"mutability": "constant",
									"name": "DECRYPT",
									"nameLocation": "1498:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1472:86:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 12,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1472:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303034",
										"id": 13,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1516:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000004"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 17,
									"mutability": "constant",
									"name": "GENERATE_SIGNING_KEYPAIR",
									"nameLocation": "1590:24:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1564:103:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 15,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1564:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303035",
										"id": 16,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1625:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000005"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 20,
									"mutability": "constant",
									"name": "SIGN_DIGEST",
									"nameLocation": "1699:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1673:90:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 18,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1673:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303036",
										"id": 19,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1721:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000006"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 23,
									"mutability": "constant",
									"name": "VERIFY_DIGEST",
									"nameLocation": "1795:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1769:92:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 21,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1769:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303037",
										"id": 22,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1819:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000007"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 26,
									"mutability": "constant",
									"name": "CURVE25519_PUBLIC_KEY",
									"nameLocation": "1893:21:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1867:100:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 24,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1867:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303038",
										"id": 25,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1925:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000008"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 29,
									"mutability": "constant",
									"name": "GAS_USED",
									"nameLocation": "1999:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "1973:87:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 27,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1973:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303039",
										"id": 28,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2018:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000009"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 32,
									"mutability": "constant",
									"name": "PAD_GAS",
									"nameLocation": "2092:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "2066:86:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 30,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2066:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030303061",
										"id": 31,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2110:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x010000000000000000000000000000000000000a"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 35,
									"mutability": "constant",
									"name": "SHA512_256",
									"nameLocation": "2228:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "2202:89:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 33,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2202:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030313031",
										"id": 34,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2249:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000101"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 38,
									"mutability": "constant",
									"name": "SHA512",
									"nameLocation": "2323:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "2297:85:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 36,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2297:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030313032",
										"id": 37,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2340:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000102"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 41,
									"mutability": "constant",
									"name": "SHA384",
									"nameLocation": "2414:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 443,
									"src": "2388:85:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 39,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2388:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830313030303030303030303030303030303030303030303030303030303030303030303030313034",
										"id": 40,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2431:42:0",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x0100000000000000000000000000000000000104"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "Sapphire.Curve25519PublicKey",
									"id": 43,
									"name": "Curve25519PublicKey",
									"nameLocation": "2485:19:0",
									"nodeType": "UserDefinedValueTypeDefinition",
									"src": "2480:36:0",
									"underlyingType": {
										"id": 42,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2508:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"canonicalName": "Sapphire.Curve25519SecretKey",
									"id": 45,
									"name": "Curve25519SecretKey",
									"nameLocation": "2526:19:0",
									"nodeType": "UserDefinedValueTypeDefinition",
									"src": "2521:36:0",
									"underlyingType": {
										"id": 44,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2549:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"canonicalName": "Sapphire.SigningAlg",
									"id": 55,
									"members": [
										{
											"id": 46,
											"name": "Ed25519Oasis",
											"nameLocation": "2782:12:0",
											"nodeType": "EnumValue",
											"src": "2782:12:0"
										},
										{
											"id": 47,
											"name": "Ed25519Pure",
											"nameLocation": "2861:11:0",
											"nodeType": "EnumValue",
											"src": "2861:11:0"
										},
										{
											"id": 48,
											"name": "Ed25519PrehashedSha512",
											"nameLocation": "2956:22:0",
											"nodeType": "EnumValue",
											"src": "2956:22:0"
										},
										{
											"id": 49,
											"name": "Secp256k1Oasis",
											"nameLocation": "3183:14:0",
											"nodeType": "EnumValue",
											"src": "3183:14:0"
										},
										{
											"id": 50,
											"name": "Secp256k1PrehashedKeccak256",
											"nameLocation": "3344:27:0",
											"nodeType": "EnumValue",
											"src": "3344:27:0"
										},
										{
											"id": 51,
											"name": "Secp256k1PrehashedSha256",
											"nameLocation": "3447:24:0",
											"nodeType": "EnumValue",
											"src": "3447:24:0"
										},
										{
											"id": 52,
											"name": "Sr25519",
											"nameLocation": "3538:7:0",
											"nodeType": "EnumValue",
											"src": "3538:7:0"
										},
										{
											"id": 53,
											"name": "Secp256r1PrehashedSha256",
											"nameLocation": "3621:24:0",
											"nodeType": "EnumValue",
											"src": "3621:24:0"
										},
										{
											"id": 54,
											"name": "Secp384r1PrehashedSha384",
											"nameLocation": "3721:24:0",
											"nodeType": "EnumValue",
											"src": "3721:24:0"
										}
									],
									"name": "SigningAlg",
									"nameLocation": "2568:10:0",
									"nodeType": "EnumDefinition",
									"src": "2563:1188:0"
								},
								{
									"body": {
										"id": 85,
										"nodeType": "Block",
										"src": "6117:202:0",
										"statements": [
											{
												"assignments": [
													66,
													68
												],
												"declarations": [
													{
														"constant": false,
														"id": 66,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6133:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 85,
														"src": "6128:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 65,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6128:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 68,
														"mutability": "mutable",
														"name": "entropy",
														"nameLocation": "6155:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 85,
														"src": "6142:20:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 67,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6142:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 77,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 73,
																	"name": "numBytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 58,
																	"src": "6214:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 74,
																	"name": "pers",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 60,
																	"src": "6224:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 71,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "6203:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "6207:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "6203:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6203:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 69,
															"name": "RANDOM_BYTES",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5,
															"src": "6166:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 70,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6179:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6166:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6166:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6127:112:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 66,
															"src": "6257:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "72616e646f6d42797465733a206661696c6564",
															"id": 80,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6266:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_54f87774dc8d710bae7c8849a070812ab4228b580286569c644fb9102fd93bac",
																"typeString": "literal_string \"randomBytes: failed\""
															},
															"value": "randomBytes: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_54f87774dc8d710bae7c8849a070812ab4228b580286569c644fb9102fd93bac",
																"typeString": "literal_string \"randomBytes: failed\""
															}
														],
														"id": 78,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6249:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6249:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 82,
												"nodeType": "ExpressionStatement",
												"src": "6249:39:0"
											},
											{
												"expression": {
													"id": 83,
													"name": "entropy",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 68,
													"src": "6305:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 64,
												"id": 84,
												"nodeType": "Return",
												"src": "6298:14:0"
											}
										]
									},
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "3757:2232:0",
										"text": " @notice Generate `num_bytes` pseudo-random bytes, with an optional\n personalization string (`pers`) added into the hashing algorithm to\n increase domain separation when needed.\n #### Precompile address\n `0x0100000000000000000000000000000000000001`\n #### Gas cost\n 10,000 minimum plus 240 per output word plus 60 per word of the\n personalization string.\n #### Implementation details\n The mode (e.g. simulation or \"view call\" vs transaction execution) is fed\n to TupleHash (among other block-dependent components) to derive the \"key\n id\", which is then used to derive a per-block VRF key from\n epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\n id will result in a unique per-block VRF key. This per-block VRF key is\n then used to create the per-block root RNG which is then used to derive\n domain-separated (using Merlin transcripts) per-transaction random RNGs\n which are then exposed via this precompile. The KMAC, cSHAKE and\n TupleHash algorithms are SHA-3 derived functions defined in [NIST\n Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\n #### DANGER: Prior to Sapphire ParaTime 0.6.0\n All view queries and simulated transactions (via `eth_call`) would\n receive the same entropy in-between blocks if they use the same\n `num_bytes` and `pers` parameters. If your contract requires\n confidentiality you should generate a secret in the constructor to be\n used with view calls:\n ```solidity\n Sapphire.randomBytes(64, abi.encodePacked(msg.sender, this.perContactSecret));\n ```\n #### Example\n ```solidity\n bytes memory randomPad = Sapphire.randomBytes(64, \"\");\n ```\n @param numBytes The number of bytes to return.\n @param pers An optional personalization string to increase domain\n        separation.\n @return The random bytes. If the number of bytes requested is too large\n         (over 1024), a smaller amount (1024) will be returned."
									},
									"id": 86,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "randomBytes",
									"nameLocation": "6003:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "numBytes",
												"nameLocation": "6023:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "6015:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6015:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "pers",
												"nameLocation": "6046:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "6033:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 59,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6033:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6014:37:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "6099:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 62,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6099:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6098:14:0"
									},
									"scope": 443,
									"src": "5994:325:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "6814:604:0",
										"statements": [
											{
												"assignments": [
													99
												],
												"declarations": [
													{
														"constant": false,
														"id": 99,
														"mutability": "mutable",
														"name": "scalar",
														"nameLocation": "6837:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 153,
														"src": "6824:19:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 98,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6824:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 104,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6858:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														{
															"id": 102,
															"name": "pers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "6862:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 100,
														"name": "randomBytes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "6846:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6846:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6824:43:0"
											},
											{
												"expression": {
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 105,
															"name": "scalar",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "6928:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 107,
														"indexExpression": {
															"hexValue": "30",
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6935:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6928:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "&=",
													"rightHandSide": {
														"hexValue": "30786638",
														"id": 108,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6941:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_248_by_1",
															"typeString": "int_const 248"
														},
														"value": "0xf8"
													},
													"src": "6928:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "6928:17:0"
											},
											{
												"expression": {
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 111,
															"name": "scalar",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "7015:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 113,
														"indexExpression": {
															"hexValue": "3331",
															"id": 112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7022:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31_by_1",
																"typeString": "int_const 31"
															},
															"value": "31"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7015:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "&=",
													"rightHandSide": {
														"hexValue": "30783766",
														"id": 114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7029:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_127_by_1",
															"typeString": "int_const 127"
														},
														"value": "0x7f"
													},
													"src": "7015:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "7015:18:0"
											},
											{
												"expression": {
													"id": 121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 117,
															"name": "scalar",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "7068:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 119,
														"indexExpression": {
															"hexValue": "3331",
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7075:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31_by_1",
																"typeString": "int_const 31"
															},
															"value": "31"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7068:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "|=",
													"rightHandSide": {
														"hexValue": "30783430",
														"id": 120,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7082:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_64_by_1",
															"typeString": "int_const 64"
														},
														"value": "0x40"
													},
													"src": "7068:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 122,
												"nodeType": "ExpressionStatement",
												"src": "7068:18:0"
											},
											{
												"assignments": [
													124,
													126
												],
												"declarations": [
													{
														"constant": false,
														"id": 124,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7123:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 153,
														"src": "7118:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 123,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7118:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 126,
														"mutability": "mutable",
														"name": "pkBytes",
														"nameLocation": "7145:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 153,
														"src": "7132:20:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 125,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7132:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 131,
												"initialValue": {
													"arguments": [
														{
															"id": 129,
															"name": "scalar",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "7202:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 127,
															"name": "CURVE25519_PUBLIC_KEY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 26,
															"src": "7156:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 128,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7178:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "7156:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7156:62:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7117:101:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 133,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 124,
															"src": "7236:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "67656e206375727665323535313920706b3a206661696c6564",
															"id": 134,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7245:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1a9a56956fb564bd7fa7e5455f2d50e37d7cff16ebd3280d11122562b576157d",
																"typeString": "literal_string \"gen curve25519 pk: failed\""
															},
															"value": "gen curve25519 pk: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1a9a56956fb564bd7fa7e5455f2d50e37d7cff16ebd3280d11122562b576157d",
																"typeString": "literal_string \"gen curve25519 pk: failed\""
															}
														],
														"id": 132,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7228:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7228:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "7228:45:0"
											},
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 141,
																			"name": "pkBytes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 126,
																			"src": "7337:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 140,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7329:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes32_$",
																			"typeString": "type(bytes32)"
																		},
																		"typeName": {
																			"id": 139,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "7329:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 142,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7329:16:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 137,
																	"name": "Curve25519PublicKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 43,
																	"src": "7304:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_userDefinedValueType$_Curve25519PublicKey_$43_$",
																		"typeString": "type(Sapphire.Curve25519PublicKey)"
																	}
																},
																"id": 138,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7324:4:0",
																"memberName": "wrap",
																"nodeType": "MemberAccess",
																"src": "7304:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Curve25519PublicKey_$43_$",
																	"typeString": "function (bytes32) pure returns (Sapphire.Curve25519PublicKey)"
																}
															},
															"id": 143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7304:42:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
																"typeString": "Sapphire.Curve25519PublicKey"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 148,
																			"name": "scalar",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 99,
																			"src": "7393:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7385:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes32_$",
																			"typeString": "type(bytes32)"
																		},
																		"typeName": {
																			"id": 146,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "7385:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7385:15:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 144,
																	"name": "Curve25519SecretKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 45,
																	"src": "7360:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_userDefinedValueType$_Curve25519SecretKey_$45_$",
																		"typeString": "type(Sapphire.Curve25519SecretKey)"
																	}
																},
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7380:4:0",
																"memberName": "wrap",
																"nodeType": "MemberAccess",
																"src": "7360:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_Curve25519SecretKey_$45_$",
																	"typeString": "function (bytes32) pure returns (Sapphire.Curve25519SecretKey)"
																}
															},
															"id": 150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7360:41:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
																"typeString": "Sapphire.Curve25519SecretKey"
															}
														}
													],
													"id": 151,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7290:121:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_userDefinedValueType$_Curve25519PublicKey_$43_$_t_userDefinedValueType$_Curve25519SecretKey_$45_$",
														"typeString": "tuple(Sapphire.Curve25519PublicKey,Sapphire.Curve25519SecretKey)"
													}
												},
												"functionReturnParameters": 97,
												"id": 152,
												"nodeType": "Return",
												"src": "7283:128:0"
											}
										]
									},
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "6325:331:0",
										"text": " @notice Generates a Curve25519 keypair.\n @param pers An optional personalization string used to add domain\n separation.\n @return pk The Curve25519 public key. Useful for key exchange.\n @return sk The Curve25519 secret key. Pairs well with\n [deriveSymmetricKey](#derivesymmetrickey)."
									},
									"id": 154,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "generateCurve25519KeyPair",
									"nameLocation": "6670:25:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "pers",
												"nameLocation": "6709:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "6696:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 88,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6696:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6695:19:0"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "pk",
												"nameLocation": "6782:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "6762:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
													"typeString": "Sapphire.Curve25519PublicKey"
												},
												"typeName": {
													"id": 92,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 91,
														"name": "Curve25519PublicKey",
														"nameLocations": [
															"6762:19:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 43,
														"src": "6762:19:0"
													},
													"referencedDeclaration": 43,
													"src": "6762:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
														"typeString": "Sapphire.Curve25519PublicKey"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "sk",
												"nameLocation": "6806:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "6786:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
													"typeString": "Sapphire.Curve25519SecretKey"
												},
												"typeName": {
													"id": 95,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 94,
														"name": "Curve25519SecretKey",
														"nameLocations": [
															"6786:19:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 45,
														"src": "6786:19:0"
													},
													"referencedDeclaration": 45,
													"src": "6786:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
														"typeString": "Sapphire.Curve25519SecretKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6761:48:0"
									},
									"scope": 443,
									"src": "6661:757:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "8156:230:0",
										"statements": [
											{
												"assignments": [
													167,
													169
												],
												"declarations": [
													{
														"constant": false,
														"id": 167,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "8172:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 189,
														"src": "8167:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 166,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "8167:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 169,
														"mutability": "mutable",
														"name": "symmetric",
														"nameLocation": "8194:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 189,
														"src": "8181:22:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 168,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "8181:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 178,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 174,
																	"name": "peerPublicKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 158,
																	"src": "8253:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
																		"typeString": "Sapphire.Curve25519PublicKey"
																	}
																},
																{
																	"id": 175,
																	"name": "secretKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 161,
																	"src": "8268:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
																		"typeString": "Sapphire.Curve25519SecretKey"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
																		"typeString": "Sapphire.Curve25519PublicKey"
																	},
																	{
																		"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
																		"typeString": "Sapphire.Curve25519SecretKey"
																	}
																],
																"expression": {
																	"id": 172,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8242:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 173,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "8246:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "8242:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8242:36:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 170,
															"name": "DERIVE_KEY",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 8,
															"src": "8207:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8218:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "8207:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8207:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8166:122:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 180,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "8306:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "64657269766553796d6d65747269634b65793a206661696c6564",
															"id": 181,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8315:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_987d340c438896174a2eb0db3a73ef80f720679a81bbb0b9ea3aa4467ab72d02",
																"typeString": "literal_string \"deriveSymmetricKey: failed\""
															},
															"value": "deriveSymmetricKey: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_987d340c438896174a2eb0db3a73ef80f720679a81bbb0b9ea3aa4467ab72d02",
																"typeString": "literal_string \"deriveSymmetricKey: failed\""
															}
														],
														"id": 179,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8298:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8298:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 183,
												"nodeType": "ExpressionStatement",
												"src": "8298:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 186,
															"name": "symmetric",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "8369:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 185,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "8361:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes32_$",
															"typeString": "type(bytes32)"
														},
														"typeName": {
															"id": 184,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "8361:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8361:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 165,
												"id": 188,
												"nodeType": "Return",
												"src": "8354:25:0"
											}
										]
									},
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "7424:579:0",
										"text": " @notice Derive a symmetric key from a pair of keys using x25519.\n #### Precompile address\n `0x0100000000000000000000000000000000000002`\n #### Gas cost\n 100,000\n #### Example\n ```solidity\n bytes32 publicKey = ... ;\n bytes32 privateKey = ... ;\n bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\n ```\n @param peerPublicKey The peer's public key.\n @param secretKey Your secret key.\n @return A derived symmetric key."
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deriveSymmetricKey",
									"nameLocation": "8017:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "peerPublicKey",
												"nameLocation": "8065:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "8045:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
													"typeString": "Sapphire.Curve25519PublicKey"
												},
												"typeName": {
													"id": 157,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 156,
														"name": "Curve25519PublicKey",
														"nameLocations": [
															"8045:19:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 43,
														"src": "8045:19:0"
													},
													"referencedDeclaration": 43,
													"src": "8045:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_Curve25519PublicKey_$43",
														"typeString": "Sapphire.Curve25519PublicKey"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "secretKey",
												"nameLocation": "8108:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "8088:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
													"typeString": "Sapphire.Curve25519SecretKey"
												},
												"typeName": {
													"id": 160,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 159,
														"name": "Curve25519SecretKey",
														"nameLocations": [
															"8088:19:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 45,
														"src": "8088:19:0"
													},
													"referencedDeclaration": 45,
													"src": "8088:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_Curve25519SecretKey_$45",
														"typeString": "Sapphire.Curve25519SecretKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8035:88:0"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "8147:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 163,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8147:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8146:9:0"
									},
									"scope": 443,
									"src": "8008:378:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "9556:222:0",
										"statements": [
											{
												"assignments": [
													205,
													207
												],
												"declarations": [
													{
														"constant": false,
														"id": 205,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9572:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 226,
														"src": "9567:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 204,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9567:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 207,
														"mutability": "mutable",
														"name": "ciphertext",
														"nameLocation": "9594:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 226,
														"src": "9581:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 206,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "9581:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 218,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 212,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 193,
																	"src": "9651:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 213,
																	"name": "nonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 195,
																	"src": "9656:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 214,
																	"name": "plaintext",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 197,
																	"src": "9663:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 215,
																	"name": "additionalData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 199,
																	"src": "9674:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 210,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9640:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 211,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9644:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9640:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9640:49:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 208,
															"name": "ENCRYPT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "9608:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9616:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "9608:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9608:91:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9566:133:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 220,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "9717:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "656e63727970743a206661696c6564",
															"id": 221,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9726:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5614603d541e467d6f35299b6c494d6d7c96318fd9033e95f551373c3052a781",
																"typeString": "literal_string \"encrypt: failed\""
															},
															"value": "encrypt: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5614603d541e467d6f35299b6c494d6d7c96318fd9033e95f551373c3052a781",
																"typeString": "literal_string \"encrypt: failed\""
															}
														],
														"id": 219,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9709:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9709:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 223,
												"nodeType": "ExpressionStatement",
												"src": "9709:35:0"
											},
											{
												"expression": {
													"id": 224,
													"name": "ciphertext",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 207,
													"src": "9761:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 203,
												"id": 225,
												"nodeType": "Return",
												"src": "9754:17:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "8392:986:0",
										"text": " @notice Encrypt and authenticate the plaintext and additional data using\n DeoxysII.\n #### Precompile address\n `0x0100000000000000000000000000000000000003`\n #### Gas cost\n 50,000 minimum plus 100 per word of input\n #### Example\n ```solidity\n bytes32 key = ... ;\n bytes32 nonce = ... ;\n bytes memory text = \"plain text\";\n bytes memory ad = \"additional data\";\n bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\n bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n ```\n @param key The key to use for encryption.\n @param nonce The nonce. Note that only the first 15 bytes of this\n parameter are used.\n @param plaintext The plaintext to encrypt and authenticate.\n @param additionalData The additional data to authenticate.\n @return The ciphertext with appended auth tag."
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "encrypt",
									"nameLocation": "9392:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "9417:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "9409:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9409:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "9438:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "9430:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 194,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9430:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "plaintext",
												"nameLocation": "9466:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "9453:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 196,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9453:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "additionalData",
												"nameLocation": "9498:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "9485:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 198,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9485:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9399:119:0"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "9542:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 201,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9542:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9541:14:0"
									},
									"scope": 443,
									"src": "9383:395:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "11014:221:0",
										"statements": [
											{
												"assignments": [
													242,
													244
												],
												"declarations": [
													{
														"constant": false,
														"id": 242,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "11030:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 263,
														"src": "11025:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 241,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "11025:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 244,
														"mutability": "mutable",
														"name": "plaintext",
														"nameLocation": "11052:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 263,
														"src": "11039:22:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 243,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "11039:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 255,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 249,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 230,
																	"src": "11108:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 250,
																	"name": "nonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 232,
																	"src": "11113:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 251,
																	"name": "ciphertext",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 234,
																	"src": "11120:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 252,
																	"name": "additionalData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 236,
																	"src": "11132:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "11097:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "11101:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "11097:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11097:50:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 245,
															"name": "DECRYPT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 14,
															"src": "11065:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 246,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11073:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "11065:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11065:92:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11024:133:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 257,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "11175:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "646563727970743a206661696c6564",
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11184:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_903e0471dcbfc795d05065e8a540355c389c64753c3dd674c3f3e786b2d3807c",
																"typeString": "literal_string \"decrypt: failed\""
															},
															"value": "decrypt: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_903e0471dcbfc795d05065e8a540355c389c64753c3dd674c3f3e786b2d3807c",
																"typeString": "literal_string \"decrypt: failed\""
															}
														],
														"id": 256,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11167:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11167:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 260,
												"nodeType": "ExpressionStatement",
												"src": "11167:35:0"
											},
											{
												"expression": {
													"id": 261,
													"name": "plaintext",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 244,
													"src": "11219:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 240,
												"id": 262,
												"nodeType": "Return",
												"src": "11212:16:0"
											}
										]
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "9784:1051:0",
										"text": " @notice Decrypt and authenticate the ciphertext and additional data using\n DeoxysII. Reverts if the auth tag is incorrect.\n #### Precompile address\n `0x0100000000000000000000000000000000000004`\n #### Gas cost\n 50,000 minimum plus 100 per word of input\n #### Example\n ```solidity\n bytes32 key = ... ;\n bytes32 nonce = ... ;\n bytes memory text = \"plain text\";\n bytes memory ad = \"additional data\";\n bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\n bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\n ```\n @param key The key to use for decryption.\n @param nonce The nonce. Note that only the first 15 bytes of this\n parameter are used.\n @param ciphertext The ciphertext with tag to decrypt and authenticate.\n @param additionalData The additional data to authenticate against the\n ciphertext.\n @return The original plaintext."
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrypt",
									"nameLocation": "10849:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "10874:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "10866:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 229,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10866:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "10895:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "10887:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 231,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10887:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "ciphertext",
												"nameLocation": "10923:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "10910:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10910:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "additionalData",
												"nameLocation": "10956:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "10943:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 235,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10943:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10856:120:0"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "11000:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11000:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10999:14:0"
									},
									"scope": 443,
									"src": "10840:395:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "13244:236:0",
										"statements": [
											{
												"assignments": [
													278,
													280
												],
												"declarations": [
													{
														"constant": false,
														"id": 278,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "13260:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 305,
														"src": "13255:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 277,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "13255:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 280,
														"mutability": "mutable",
														"name": "keypair",
														"nameLocation": "13282:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 305,
														"src": "13269:20:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 279,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "13269:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 289,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 285,
																	"name": "alg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 268,
																	"src": "13353:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_SigningAlg_$55",
																		"typeString": "enum Sapphire.SigningAlg"
																	}
																},
																{
																	"id": 286,
																	"name": "seed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 270,
																	"src": "13358:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_SigningAlg_$55",
																		"typeString": "enum Sapphire.SigningAlg"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 283,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "13342:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "13346:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "13342:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13342:21:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 281,
															"name": "GENERATE_SIGNING_KEYPAIR",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 17,
															"src": "13293:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "13331:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "13293:48:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13293:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13254:110:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 291,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 278,
															"src": "13382:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "67656e207369676e696e67206b6579706169723a206661696c6564",
															"id": 292,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13391:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7b9267465e161c284a8a39384fdde2f97aa1902373695a1437fb9bfd91d7de20",
																"typeString": "literal_string \"gen signing keypair: failed\""
															},
															"value": "gen signing keypair: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7b9267465e161c284a8a39384fdde2f97aa1902373695a1437fb9bfd91d7de20",
																"typeString": "literal_string \"gen signing keypair: failed\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13374:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13374:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "13374:47:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 297,
															"name": "keypair",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 280,
															"src": "13449:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "13459:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 298,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "13459:5:0",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "13466:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 300,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "13466:5:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 302,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "13458:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(bytes storage pointer),type(bytes storage pointer))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(bytes storage pointer),type(bytes storage pointer))"
															}
														],
														"expression": {
															"id": 295,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "13438:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 296,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "13442:6:0",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "13438:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13438:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bytes memory,bytes memory)"
													}
												},
												"functionReturnParameters": 276,
												"id": 304,
												"nodeType": "Return",
												"src": "13431:42:0"
											}
										]
									},
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "11241:1832:0",
										"text": " @notice Generate a public/private key pair using the specified method and\n seed. The available methods are items in the\n [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\n generation method ignores subvariants, so all three Ed25519-based are\n equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\n Sr25519 is not available and will return an error.\n #### Precompile address\n `0x0100000000000000000000000000000000000005`\n #### Gas Cost\n ##### Ed25519: 1,000 gas\n - `0` (`Ed25519Oasis`)\n - `1` (`Ed25519Pure`)\n - `2` (`Ed25519PrehashedSha512`)\n ##### Secp256k1: 1,500 gas.\n - `3` (`Secp256k1Oasis`)\n - `4` (`Secp256k1PrehashedKeccak256`)\n - `5` (`Secp256k1PrehashedSha256`)\n ##### Secp256r1: 4,000 gas\n - `7` (`Secp256r1PrehashedSha256`)\n #### Public Key Format\n ##### Ed25519\n 32 bytes\n ##### Secp256k1 & Secp256r1\n 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32 byte X\n coordinate).\n #### Example\n ```solidity\n bytes memory seed = hex\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\";\n bytes memory publicKey;\n bytes memory privateKey;\n (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\n ```\n @param alg The signing alg for which to generate a keypair.\n @param seed The seed to use for generating the key pair. You can use the\n `randomBytes` method if you don't already have a seed.\n @return publicKey The public half of the keypair.\n @return secretKey The secret half of the keypair."
									},
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "generateSigningKeyPair",
									"nameLocation": "13087:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "alg",
												"nameLocation": "13121:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "13110:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SigningAlg_$55",
													"typeString": "enum Sapphire.SigningAlg"
												},
												"typeName": {
													"id": 267,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 266,
														"name": "SigningAlg",
														"nameLocations": [
															"13110:10:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 55,
														"src": "13110:10:0"
													},
													"referencedDeclaration": 55,
													"src": "13110:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SigningAlg_$55",
														"typeString": "enum Sapphire.SigningAlg"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "seed",
												"nameLocation": "13139:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "13126:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 269,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13126:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13109:35:0"
									},
									"returnParameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "publicKey",
												"nameLocation": "13205:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "13192:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 272,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13192:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "secretKey",
												"nameLocation": "13229:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "13216:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 274,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13216:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13191:48:0"
									},
									"scope": 443,
									"src": "13078:402:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 343,
										"nodeType": "Block",
										"src": "16286:210:0",
										"statements": [
											{
												"assignments": [
													322,
													324
												],
												"declarations": [
													{
														"constant": false,
														"id": 322,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "16302:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 343,
														"src": "16297:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 321,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "16297:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 324,
														"mutability": "mutable",
														"name": "sig",
														"nameLocation": "16324:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 343,
														"src": "16311:16:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 323,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "16311:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 335,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 329,
																	"name": "alg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 310,
																	"src": "16378:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_SigningAlg_$55",
																		"typeString": "enum Sapphire.SigningAlg"
																	}
																},
																{
																	"id": 330,
																	"name": "secretKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 312,
																	"src": "16383:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 331,
																	"name": "contextOrHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 314,
																	"src": "16394:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 332,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "16409:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_SigningAlg_$55",
																		"typeString": "enum Sapphire.SigningAlg"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 327,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "16367:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "16371:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "16367:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 333,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16367:50:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 325,
															"name": "SIGN_DIGEST",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 20,
															"src": "16331:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 326,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "16343:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "16331:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16331:96:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16296:131:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 337,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "16445:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7369676e3a206661696c6564",
															"id": 338,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16454:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30424c91df67870892b008f1299c54dc8a7ff30cbedf2b16aaa52c514b69b2af",
																"typeString": "literal_string \"sign: failed\""
															},
															"value": "sign: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30424c91df67870892b008f1299c54dc8a7ff30cbedf2b16aaa52c514b69b2af",
																"typeString": "literal_string \"sign: failed\""
															}
														],
														"id": 336,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "16437:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16437:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 340,
												"nodeType": "ExpressionStatement",
												"src": "16437:32:0"
											},
											{
												"expression": {
													"id": 341,
													"name": "sig",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 324,
													"src": "16486:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 320,
												"id": 342,
												"nodeType": "Return",
												"src": "16479:10:0"
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "13486:2606:0",
										"text": " @notice Sign a message within the provided context using the specified\n algorithm, and return the signature. The `context_or_digest` and\n `messages` parameters change in meaning slightly depending on the method\n requested. For methods that take a context in addition to the message you\n must pass the context in the `context_or_digest` parameter and use\n `message` as expected. For methods that take a pre-existing hash of the\n message, pass that in `context_or_digest` and leave `message` empty.\n Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\n context and a message (each are variable length `bytes`), the context\n serves as a domain separator.\n #### Precompile address\n `0x0100000000000000000000000000000000000006`\n #### Gas cost\n See below for the method-dependent base cost, plus 8 gas per 32 bytes of\n context and message except digest.\n #### Signing algorithms\n - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\n - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\n - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\n   (64 bytes) as context, empty message.\n - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\n - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\n   (32 bytes) as context, empty message.\n - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\n   bytes) as context, empty message.\n - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\n   bytes) as context, empty message.\n #### Example\n ```solidity\n Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\n bytes memory pk;\n bytes memory sk;\n (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \"\"));\n bytes memory signature = Sapphire.sign(alg, sk, \"\", \"signed message\");\n ```\n @param alg The signing algorithm to use.\n @param secretKey The secret key to use for signing. The key must be valid\n for use with the requested algorithm.\n @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\n @param message Message to sign, should be zero-length if precomputed hash\n given.\n @return signature The resulting signature.\n @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign"
									},
									"id": 344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sign",
									"nameLocation": "16106:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "alg",
												"nameLocation": "16131:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "16120:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SigningAlg_$55",
													"typeString": "enum Sapphire.SigningAlg"
												},
												"typeName": {
													"id": 309,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 308,
														"name": "SigningAlg",
														"nameLocations": [
															"16120:10:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 55,
														"src": "16120:10:0"
													},
													"referencedDeclaration": 55,
													"src": "16120:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SigningAlg_$55",
														"typeString": "enum Sapphire.SigningAlg"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "secretKey",
												"nameLocation": "16157:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "16144:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 311,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16144:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "contextOrHash",
												"nameLocation": "16189:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "16176:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 313,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16176:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "16225:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "16212:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 315,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16212:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16110:128:0"
									},
									"returnParameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "16275:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "16262:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 318,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16262:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16261:24:0"
									},
									"scope": 443,
									"src": "16097:399:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "18816:241:0",
										"statements": [
											{
												"assignments": [
													362,
													364
												],
												"declarations": [
													{
														"constant": false,
														"id": 362,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "18832:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 390,
														"src": "18827:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 361,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "18827:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 364,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "18854:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 390,
														"src": "18841:14:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 363,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "18841:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 376,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 369,
																	"name": "alg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 348,
																	"src": "18908:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_SigningAlg_$55",
																		"typeString": "enum Sapphire.SigningAlg"
																	}
																},
																{
																	"id": 370,
																	"name": "publicKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 350,
																	"src": "18913:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 371,
																	"name": "contextOrHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 352,
																	"src": "18924:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 372,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "18939:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 373,
																	"name": "signature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 356,
																	"src": "18948:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_SigningAlg_$55",
																		"typeString": "enum Sapphire.SigningAlg"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 367,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "18897:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "18901:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "18897:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18897:61:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 365,
															"name": "VERIFY_DIGEST",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 23,
															"src": "18859:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 366,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "18873:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "18859:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18859:109:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18826:142:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 378,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "18986:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7665726966793a206661696c6564",
															"id": 379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18995:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_34526ef19154ceba3d8d1dd62e0cc9f5c1f5642117c7e6d24bd503b2df5eeaa2",
																"typeString": "literal_string \"verify: failed\""
															},
															"value": "verify: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_34526ef19154ceba3d8d1dd62e0cc9f5c1f5642117c7e6d24bd503b2df5eeaa2",
																"typeString": "literal_string \"verify: failed\""
															}
														],
														"id": 377,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "18978:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18978:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 381,
												"nodeType": "ExpressionStatement",
												"src": "18978:34:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 384,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "19040:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "19044:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	},
																	"typeName": {
																		"id": 385,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "19044:4:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 387,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "19043:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bool_$",
																"typeString": "type(bool)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_type$_t_bool_$",
																"typeString": "type(bool)"
															}
														],
														"expression": {
															"id": 382,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "19029:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 383,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "19033:6:0",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "19029:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19029:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 360,
												"id": 389,
												"nodeType": "Return",
												"src": "19022:28:0"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "16502:2095:0",
										"text": " @notice Verifies that the provided digest was signed with using the\n secret key corresponding to the provided private key and the specified\n signing algorithm.\n The `method`, `context_or_digest` and `message` parameters have the same\n meaning as described above in the [sign()](#sign) function.\n #### Precompile address\n `0x0100000000000000000000000000000000000007`\n #### Gas cost\n The algorithm-specific base cost below, with an additional **8 gas per\n 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\n `Ed25519Pure` and `Secp256k1Oasis` algorithms.\n - `0` (`Ed25519Oasis`): 2,000 gas\n - `1` (`Ed25519Pure`): 2,000 gas\n - `2` (`Ed25519PrehashedSha512`): 2,000 gas\n - `3` (`Secp256k1Oasis`): 3,000 gas\n - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\n - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\n - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\n #### Example\n ```solidity\n Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\n bytes memory pk;\n bytes memory sk;\n bytes memory digest = abi.encodePacked(keccak256(\"signed message\"));\n (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \"\"));\n bytes memory signature = Sapphire.sign(alg, sk, digest, \"\");\n require( Sapphire.verify(alg, pk, digest, \"\", signature) );\n ```\n @param alg The signing algorithm by which the signature was generated.\n @param publicKey The public key against which to check the signature.\n @param contextOrHash Domain-Separator Context, or precomputed hash bytes\n @param message The hash of the message that was signed, should be\n zero-length if precomputed hash was given.\n @param signature The signature to check.\n @return verified Whether the signature is valid for the given parameters.\n @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify"
									},
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "18611:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "alg",
												"nameLocation": "18638:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "18627:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SigningAlg_$55",
													"typeString": "enum Sapphire.SigningAlg"
												},
												"typeName": {
													"id": 347,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 346,
														"name": "SigningAlg",
														"nameLocations": [
															"18627:10:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 55,
														"src": "18627:10:0"
													},
													"referencedDeclaration": 55,
													"src": "18627:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SigningAlg_$55",
														"typeString": "enum Sapphire.SigningAlg"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "publicKey",
												"nameLocation": "18664:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "18651:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 349,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18651:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "contextOrHash",
												"nameLocation": "18696:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "18683:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 351,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18683:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "18732:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "18719:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 353,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18719:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "18762:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "18749:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 355,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18749:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18617:160:0"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "verified",
												"nameLocation": "18806:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "18801:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 358,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "18801:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18800:15:0"
									},
									"scope": 443,
									"src": "18602:455:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 412,
										"nodeType": "Block",
										"src": "19431:120:0",
										"statements": [
											{
												"assignments": [
													398,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 398,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "19447:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 412,
														"src": "19442:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 397,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "19442:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 406,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 403,
																	"name": "toAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "19490:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																],
																"expression": {
																	"id": 401,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "19479:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "19483:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "19479:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19479:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 399,
															"name": "PAD_GAS",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "19460:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 400,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "19468:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "19460:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19460:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "19441:59:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 408,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "19518:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7665726966793a206661696c6564",
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19527:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_34526ef19154ceba3d8d1dd62e0cc9f5c1f5642117c7e6d24bd503b2df5eeaa2",
																"typeString": "literal_string \"verify: failed\""
															},
															"value": "verify: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_34526ef19154ceba3d8d1dd62e0cc9f5c1f5642117c7e6d24bd503b2df5eeaa2",
																"typeString": "literal_string \"verify: failed\""
															}
														],
														"id": 407,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "19510:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19510:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 411,
												"nodeType": "ExpressionStatement",
												"src": "19510:34:0"
											}
										]
									},
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "19063:315:0",
										"text": " @notice Set the current transactions gas usage to a specific amount\n @dev Will cause a reversion if the current usage is more than the amount.\n @param toAmount Gas usage will be set to this amount\n @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas"
									},
									"id": 413,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "padGas",
									"nameLocation": "19392:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "toAmount",
												"nameLocation": "19407:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "19399:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 393,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "19399:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19398:18:0"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19431:0:0"
									},
									"scope": 443,
									"src": "19383:168:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 441,
										"nodeType": "Block",
										"src": "19780:158:0",
										"statements": [
											{
												"assignments": [
													420,
													422
												],
												"declarations": [
													{
														"constant": false,
														"id": 420,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "19796:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 441,
														"src": "19791:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 419,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "19791:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 422,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "19818:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 441,
														"src": "19805:14:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 421,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "19805:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 427,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 425,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19843:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"id": 423,
															"name": "GAS_USED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "19823:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "19832:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "19823:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19823:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "19790:56:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 429,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "19864:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "676173757365643a206661696c6564",
															"id": 430,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19873:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6e653402a1869061703cc1f5117b0dbd597348261905e9f4272ef2962baf4e02",
																"typeString": "literal_string \"gasused: failed\""
															},
															"value": "gasused: failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6e653402a1869061703cc1f5117b0dbd597348261905e9f4272ef2962baf4e02",
																"typeString": "literal_string \"gasused: failed\""
															}
														],
														"id": 428,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "19856:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19856:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "19856:35:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 435,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "19919:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "19923:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 436,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "19923:6:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 438,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "19922:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint64_$",
																"typeString": "type(uint64)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_type$_t_uint64_$",
																"typeString": "type(uint64)"
															}
														],
														"expression": {
															"id": 433,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "19908:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "19912:6:0",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "19908:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19908:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 418,
												"id": 440,
												"nodeType": "Return",
												"src": "19901:30:0"
											}
										]
									},
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "19557:168:0",
										"text": " @notice Returns the amount of gas currently used by the transaction\n @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used"
									},
									"id": 442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "gasUsed",
									"nameLocation": "19739:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19746:2:0"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "19772:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 416,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "19772:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19771:8:0"
									},
									"scope": 443,
									"src": "19730:208:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 527,
							"src": "1117:18823:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"body": {
								"id": 471,
								"nodeType": "Block",
								"src": "21042:150:0",
								"statements": [
									{
										"assignments": [
											452,
											454
										],
										"declarations": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "21054:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "21049:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 451,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "21049:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "output",
												"nameLocation": "21076:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "21063:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 453,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21063:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 460,
										"initialValue": {
											"arguments": [
												{
													"id": 458,
													"name": "input",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 446,
													"src": "21117:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												],
												"expression": {
													"expression": {
														"id": 455,
														"name": "Sapphire",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 443,
														"src": "21086:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_Sapphire_$443_$",
															"typeString": "type(library Sapphire)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "21095:10:0",
													"memberName": "SHA512_256",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 35,
													"src": "21086:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 457,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"lValueRequested": false,
												"memberLocation": "21106:10:0",
												"memberName": "staticcall",
												"nodeType": "MemberAccess",
												"src": "21086:30:0",
												"typeDescriptions": {
													"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
													"typeString": "function (bytes memory) view returns (bool,bytes memory)"
												}
											},
											"id": 459,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "21086:37:0",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
												"typeString": "tuple(bool,bytes memory)"
											}
										},
										"nodeType": "VariableDeclarationStatement",
										"src": "21048:75:0"
									},
									{
										"expression": {
											"arguments": [
												{
													"id": 462,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 452,
													"src": "21138:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												{
													"hexValue": "7368613531325f323536",
													"id": 463,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "21147:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_f75c2d6150bf32cccbc5bf7d89da5f677facb56533342da88f5e98d14214b528",
														"typeString": "literal_string \"sha512_256\""
													},
													"value": "sha512_256"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													{
														"typeIdentifier": "t_stringliteral_f75c2d6150bf32cccbc5bf7d89da5f677facb56533342da88f5e98d14214b528",
														"typeString": "literal_string \"sha512_256\""
													}
												],
												"id": 461,
												"name": "require",
												"nodeType": "Identifier",
												"overloadedDeclarations": [
													4294967278,
													4294967278,
													4294967278
												],
												"referencedDeclaration": 4294967278,
												"src": "21130:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
													"typeString": "function (bool,string memory) pure"
												}
											},
											"id": 464,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "21130:30:0",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_tuple$__$",
												"typeString": "tuple()"
											}
										},
										"id": 465,
										"nodeType": "ExpressionStatement",
										"src": "21130:30:0"
									},
									{
										"expression": {
											"arguments": [
												{
													"id": 468,
													"name": "output",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 454,
													"src": "21182:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												],
												"id": 467,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "21174:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_bytes32_$",
													"typeString": "type(bytes32)"
												},
												"typeName": {
													"id": 466,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "21174:7:0",
													"typeDescriptions": {}
												}
											},
											"id": 469,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "21174:15:0",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"functionReturnParameters": 450,
										"id": 470,
										"nodeType": "Return",
										"src": "21167:22:0"
									}
								]
							},
							"documentation": {
								"id": 444,
								"nodeType": "StructuredDocumentation",
								"src": "19942:1029:0",
								"text": " @notice Hash the input data with SHA-512/256, according to\n [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n #### Precompile address\n `0x0100000000000000000000000000000000000102`\n #### Gas cost\n 115 gas, then 13 gas per word\n #### Example\n ```solidity\n bytes32 result = sha512_256(abi.encodePacked(\"input data\"));\n ```\n #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\n [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\n attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\n relevant if you are computing the hash of a secret message. The\n [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\n vulnerable to length-extension attacks.\n @param input Bytes to hash.\n @return result 32 byte digest.\n @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256"
							},
							"id": 472,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "sha512_256",
							"nameLocation": "20981:10:0",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 447,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 446,
										"mutability": "mutable",
										"name": "input",
										"nameLocation": "21005:5:0",
										"nodeType": "VariableDeclaration",
										"scope": 472,
										"src": "20992:18:0",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_memory_ptr",
											"typeString": "bytes"
										},
										"typeName": {
											"id": 445,
											"name": "bytes",
											"nodeType": "ElementaryTypeName",
											"src": "20992:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "20991:20:0"
							},
							"returnParameters": {
								"id": 450,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 449,
										"mutability": "mutable",
										"name": "result",
										"nameLocation": "21034:6:0",
										"nodeType": "VariableDeclaration",
										"scope": 472,
										"src": "21026:14:0",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										},
										"typeName": {
											"id": 448,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "21026:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "21025:16:0"
							},
							"scope": 527,
							"src": "20972:220:0",
							"stateMutability": "view",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 498,
								"nodeType": "Block",
								"src": "22287:114:0",
								"statements": [
									{
										"assignments": [
											481
										],
										"declarations": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "22298:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "22293:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 480,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "22293:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 482,
										"nodeType": "VariableDeclarationStatement",
										"src": "22293:12:0"
									},
									{
										"expression": {
											"id": 491,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftHandSide": {
												"components": [
													{
														"id": 483,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 481,
														"src": "22313:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													{
														"id": 484,
														"name": "output",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 478,
														"src": "22322:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													}
												],
												"id": 485,
												"isConstant": false,
												"isInlineArray": false,
												"isLValue": true,
												"isPure": false,
												"lValueRequested": true,
												"nodeType": "TupleExpression",
												"src": "22312:17:0",
												"typeDescriptions": {
													"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
													"typeString": "tuple(bool,bytes memory)"
												}
											},
											"nodeType": "Assignment",
											"operator": "=",
											"rightHandSide": {
												"arguments": [
													{
														"id": 489,
														"name": "input",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 475,
														"src": "22359:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													],
													"expression": {
														"expression": {
															"id": 486,
															"name": "Sapphire",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "22332:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Sapphire_$443_$",
																"typeString": "type(library Sapphire)"
															}
														},
														"id": 487,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "22341:6:0",
														"memberName": "SHA512",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 38,
														"src": "22332:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22348:10:0",
													"memberName": "staticcall",
													"nodeType": "MemberAccess",
													"src": "22332:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "function (bytes memory) view returns (bool,bytes memory)"
													}
												},
												"id": 490,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"kind": "functionCall",
												"lValueRequested": false,
												"nameLocations": [],
												"names": [],
												"nodeType": "FunctionCall",
												"src": "22332:33:0",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
													"typeString": "tuple(bool,bytes memory)"
												}
											},
											"src": "22312:53:0",
											"typeDescriptions": {
												"typeIdentifier": "t_tuple$__$",
												"typeString": "tuple()"
											}
										},
										"id": 492,
										"nodeType": "ExpressionStatement",
										"src": "22312:53:0"
									},
									{
										"expression": {
											"arguments": [
												{
													"id": 494,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 481,
													"src": "22380:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												{
													"hexValue": "736861353132",
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "22389:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_6c0b70e157f7134bd6b024ec9293ed6f48b7e87b8f08a110da3cb9d2624b426a",
														"typeString": "literal_string \"sha512\""
													},
													"value": "sha512"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													{
														"typeIdentifier": "t_stringliteral_6c0b70e157f7134bd6b024ec9293ed6f48b7e87b8f08a110da3cb9d2624b426a",
														"typeString": "literal_string \"sha512\""
													}
												],
												"id": 493,
												"name": "require",
												"nodeType": "Identifier",
												"overloadedDeclarations": [
													4294967278,
													4294967278,
													4294967278
												],
												"referencedDeclaration": 4294967278,
												"src": "22372:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
													"typeString": "function (bool,string memory) pure"
												}
											},
											"id": 496,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "22372:26:0",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_tuple$__$",
												"typeString": "tuple()"
											}
										},
										"id": 497,
										"nodeType": "ExpressionStatement",
										"src": "22372:26:0"
									}
								]
							},
							"documentation": {
								"id": 473,
								"nodeType": "StructuredDocumentation",
								"src": "21194:1021:0",
								"text": " @notice Hash the input data with SHA-512, according to\n [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\n #### Precompile address\n `0x0100000000000000000000000000000000000101`\n #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\n [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\n attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\n relevant if you are computing the hash of a secret message. The\n [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\n vulnerable to length-extension attacks.\n #### Gas Cost\n 115 gas, then 13 gas per word\n #### Example\n ```solidity\n bytes memory result = sha512(abi.encodePacked(\"input data\"));\n ```\n @param input Bytes to hash.\n @return output 64 byte digest.\n @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512"
							},
							"id": 499,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "sha512",
							"nameLocation": "22225:6:0",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 476,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 475,
										"mutability": "mutable",
										"name": "input",
										"nameLocation": "22245:5:0",
										"nodeType": "VariableDeclaration",
										"scope": 499,
										"src": "22232:18:0",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_memory_ptr",
											"typeString": "bytes"
										},
										"typeName": {
											"id": 474,
											"name": "bytes",
											"nodeType": "ElementaryTypeName",
											"src": "22232:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "22231:20:0"
							},
							"returnParameters": {
								"id": 479,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 478,
										"mutability": "mutable",
										"name": "output",
										"nameLocation": "22279:6:0",
										"nodeType": "VariableDeclaration",
										"scope": 499,
										"src": "22266:19:0",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_memory_ptr",
											"typeString": "bytes"
										},
										"typeName": {
											"id": 477,
											"name": "bytes",
											"nodeType": "ElementaryTypeName",
											"src": "22266:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "22265:21:0"
							},
							"scope": 527,
							"src": "22216:185:0",
							"stateMutability": "view",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 525,
								"nodeType": "Block",
								"src": "22748:114:0",
								"statements": [
									{
										"assignments": [
											508
										],
										"declarations": [
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "22759:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "22754:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 507,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "22754:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"id": 509,
										"nodeType": "VariableDeclarationStatement",
										"src": "22754:12:0"
									},
									{
										"expression": {
											"id": 518,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"leftHandSide": {
												"components": [
													{
														"id": 510,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 508,
														"src": "22774:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													{
														"id": 511,
														"name": "output",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 505,
														"src": "22783:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													}
												],
												"id": 512,
												"isConstant": false,
												"isInlineArray": false,
												"isLValue": true,
												"isPure": false,
												"lValueRequested": true,
												"nodeType": "TupleExpression",
												"src": "22773:17:0",
												"typeDescriptions": {
													"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
													"typeString": "tuple(bool,bytes memory)"
												}
											},
											"nodeType": "Assignment",
											"operator": "=",
											"rightHandSide": {
												"arguments": [
													{
														"id": 516,
														"name": "input",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 502,
														"src": "22820:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													],
													"expression": {
														"expression": {
															"id": 513,
															"name": "Sapphire",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "22793:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Sapphire_$443_$",
																"typeString": "type(library Sapphire)"
															}
														},
														"id": 514,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "22802:6:0",
														"memberName": "SHA384",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 41,
														"src": "22793:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22809:10:0",
													"memberName": "staticcall",
													"nodeType": "MemberAccess",
													"src": "22793:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "function (bytes memory) view returns (bool,bytes memory)"
													}
												},
												"id": 517,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"kind": "functionCall",
												"lValueRequested": false,
												"nameLocations": [],
												"names": [],
												"nodeType": "FunctionCall",
												"src": "22793:33:0",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
													"typeString": "tuple(bool,bytes memory)"
												}
											},
											"src": "22773:53:0",
											"typeDescriptions": {
												"typeIdentifier": "t_tuple$__$",
												"typeString": "tuple()"
											}
										},
										"id": 519,
										"nodeType": "ExpressionStatement",
										"src": "22773:53:0"
									},
									{
										"expression": {
											"arguments": [
												{
													"id": 521,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 508,
													"src": "22841:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												{
													"hexValue": "736861333834",
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "22850:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_ec6ff49708e722818e70930a24e1ab730a40b63a2d8cfc1f9445eec73ca5b6a9",
														"typeString": "literal_string \"sha384\""
													},
													"value": "sha384"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													{
														"typeIdentifier": "t_stringliteral_ec6ff49708e722818e70930a24e1ab730a40b63a2d8cfc1f9445eec73ca5b6a9",
														"typeString": "literal_string \"sha384\""
													}
												],
												"id": 520,
												"name": "require",
												"nodeType": "Identifier",
												"overloadedDeclarations": [
													4294967278,
													4294967278,
													4294967278
												],
												"referencedDeclaration": 4294967278,
												"src": "22833:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
													"typeString": "function (bool,string memory) pure"
												}
											},
											"id": 523,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"kind": "functionCall",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "22833:26:0",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_tuple$__$",
												"typeString": "tuple()"
											}
										},
										"id": 524,
										"nodeType": "ExpressionStatement",
										"src": "22833:26:0"
									}
								]
							},
							"documentation": {
								"id": 500,
								"nodeType": "StructuredDocumentation",
								"src": "22403:273:0",
								"text": " @notice Hash the input data with SHA-384.\n @param input Bytes to hash.\n @return output 48 byte digest.\n @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384"
							},
							"id": 526,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "sha384",
							"nameLocation": "22686:6:0",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 503,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 502,
										"mutability": "mutable",
										"name": "input",
										"nameLocation": "22706:5:0",
										"nodeType": "VariableDeclaration",
										"scope": 526,
										"src": "22693:18:0",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_memory_ptr",
											"typeString": "bytes"
										},
										"typeName": {
											"id": 501,
											"name": "bytes",
											"nodeType": "ElementaryTypeName",
											"src": "22693:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "22692:20:0"
							},
							"returnParameters": {
								"id": 506,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 505,
										"mutability": "mutable",
										"name": "output",
										"nameLocation": "22740:6:0",
										"nodeType": "VariableDeclaration",
										"scope": 526,
										"src": "22727:19:0",
										"stateVariable": false,
										"storageLocation": "memory",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_memory_ptr",
											"typeString": "bytes"
										},
										"typeName": {
											"id": 504,
											"name": "bytes",
											"nodeType": "ElementaryTypeName",
											"src": "22727:5:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "22726:21:0"
							},
							"scope": 527,
							"src": "22677:185:0",
							"stateMutability": "view",
							"virtual": false,
							"visibility": "internal"
						}
					],
					"src": "39:22824:0"
				},
				"id": 0
			},
			"contracts/OasisSupbro.sol": {
				"ast": {
					"absolutePath": "contracts/OasisSupbro.sol",
					"exportedSymbols": {
						"OasisSupbro": [
							538
						],
						"Sapphire": [
							443
						],
						"sha384": [
							526
						],
						"sha512": [
							499
						],
						"sha512_256": [
							472
						]
					},
					"id": 539,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 528,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "40:24:1"
						},
						{
							"absolutePath": "@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol",
							"file": "@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol",
							"id": 529,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 539,
							"sourceUnit": 527,
							"src": "68:66:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "OasisSupbro",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 538,
							"linearizedBaseContracts": [
								538
							],
							"name": "OasisSupbro",
							"nameLocation": "147:11:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 536,
										"nodeType": "Block",
										"src": "225:62:1",
										"statements": [
											{
												"expression": {
													"hexValue": "48656c6c6f20576f726c642066726f6d204f61736973205375702062726f206c6f6c",
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "243:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_3354c013fd7fcff5b821decec15a4606889a6da03ed6306d27e9fa83e8e06638",
														"typeString": "literal_string \"Hello World from Oasis Sup bro lol\""
													},
													"value": "Hello World from Oasis Sup bro lol"
												},
												"functionReturnParameters": 533,
												"id": 535,
												"nodeType": "Return",
												"src": "236:43:1"
											}
										]
									},
									"functionSelector": "45773e4e",
									"id": 537,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sayHelloWorld",
									"nameLocation": "173:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "186:2:1"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "210:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 531,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "210:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "209:15:1"
									},
									"scope": 538,
									"src": "164:123:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 539,
							"src": "138:152:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "40:252:1"
				},
				"id": 1
			}
		}
	}
}